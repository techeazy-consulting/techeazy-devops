name: EC2 Deploy via terraform

on:
  push:
    branches:
      - main
      - feature/devops-assignment-3
    tags:
      - deploy-dev
      - deploy-prod
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment stage (e.g., dev, prod)"
        required: true
        default: "dev"

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      STAGE: ${{ github.event.inputs.stage || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -var="stage=${{ github.event.inputs.stage || 'dev' }}" \
            -var-file="${{ github.event.inputs.stage || 'dev' }}.tfvars" \
            -var="github_token=${{ secrets.REPO_ACCESS_TOKEN }}"

      - name: Get EC2 Public IP
        id: ec2_ip
        run: |
          ip=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=techeazy-instance" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text | tr -d '\r' | tr -d '\n' | awk '{print $1}')
          if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "EC2_PUBLIC_IP=$ip" >> $GITHUB_ENV
            echo "ec2_public_ip=$ip" >> $GITHUB_OUTPUT
            echo "::debug::EC2_PUBLIC_IP is $ip"
          else
            echo "::error::Invalid IP address format: $ip"
            exit 1
          fi

      - name: Wait for EC2 SSH
        run: |
          echo "Waiting for EC2 to be ready..."
          sleep 60

          - name: Run Deployment Script via SSH
          uses: appleboy/ssh-action@master
          with:
            host: ${{ env.EC2_PUBLIC_IP }}
            username: ec2-user
            key: ${{ secrets.INSTANCE_KEY }}
            script: |
              set -e
              cd /home/ec2-user
              sudo rm -rf techeazy-devops
        
              echo "Cloning repo inside EC2"
              git clone --depth 1 --branch feature/devops-assignment-4 https://x-access-token:${{ secrets.REPO_ACCESS_TOKEN }}@github.com/sohampatil44/techeazy-devops.git
              cd techeazy-devops/scripts
              chmod +x deploy.sh
        
              echo "---- Running deploy.sh ----"
              bash -x ./deploy.sh ${{ github.event.inputs.stage == 'prod' && 'techeazy-bucket-prod' || 'techeazy-bucket' }} ${{ github.event.inputs.stage }}
              DEPLOY_STATUS=$?
        
              echo "---- Dumping deploy.log ----"
              cat /home/ec2-user/deploy.log || echo "No deploy.log found"
        
              if [ $DEPLOY_STATUS -ne 0 ]; then
                echo "❌ deploy.sh failed with exit code $DEPLOY_STATUS"
                exit $DEPLOY_STATUS
              fi
        
              echo "✅ deploy.sh completed successfully"

      - name: Verify App Health
        run: |
          for i in {1..5}; do
            if curl --fail http://${{ env.EC2_PUBLIC_IP }}; then
              echo "✅ App is healthy"
              exit 0
            fi
            echo "Waiting... ($i/5)"
            sleep 5
          done
          echo "❌ App health check failed"
          exit 1
